using RadCalNet.Modeling: ModelData, tests
using Flux: mae
using Test
import RadCalNet

# Loss after last training.
const LOSS = 0.0022

# Random sample data randomly extracted (20 rows).
const TESTDATA = [
    1670.0   960.0  1.9  0.5  0.15  0.18  0.03   0.161774   0.820025
    1230.0   320.0  1.9  1.0  0.04  0.08  0.18   0.20205    0.79694
    1760.0   770.0  2.1  1.5  0.22  0.24  0.12   0.309017   0.669564
    1770.0   960.0  1.9  0.5  0.15  0.0   0.13   0.0721235  0.919333
     350.0  1590.0  1.9  1.0  0.06  0.29  0.12   0.357215   0.169437
    2330.0  1820.0  1.1  1.5  0.13  0.08  0.13   0.100282   0.840802
    1220.0  2070.0  0.2  0.5  0.11  0.17  0.09   0.0361672  0.902581
     760.0  1380.0  1.9  1.5  0.1   0.01  0.10   0.188531   0.69798
    1870.0  1880.0  0.2  1.5  0.14  0.28  0.17   0.0819803  0.858508
    1910.0  2220.0  1.3  1.5  0.2   0.3   0.09   0.202592   0.63856
    2290.0   360.0  1.8  0.5  0.0   0.23  0.07   0.0755366  0.914045
    1330.0   640.0  1.7  1.5  0.21  0.04  0.06   0.227428   0.764363
    1090.0  1260.0  1.9  1.5  0.17  0.18  0.18   0.381407   0.501751
    1250.0  1590.0  0.4  1.5  0.13  0.27  0.18   0.191725   0.688272
     990.0  2320.0  0.5  1.0  0.23  0.27  0.03   0.118285   0.633932
    1920.0   720.0  0.3  1.0  0.05  0.03  0.18   0.0496579  0.945693
    1250.0   310.0  0.6  1.0  0.04  0.18  0.15   0.171857   0.827273
    1990.0  1020.0  1.3  1.0  0.09  0.11  0.15   0.140596   0.837042
    1180.0  1830.0  0.3  0.5  0.09  0.29  0.02   0.0682171  0.851304
    2120.0  1230.0  2.9  1.5  0.03  0.06  0.17   0.168034   0.791942
]

# Predictors and targets transposed.
const X = transpose(TESTDATA[:, 1:7])
const Y = transpose(TESTDATA[:, 8:9])

@testset "RadCalNet.jl" begin
    @test mae(RadCalNet.model(X), Y) <= LOSS
end
